generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id              String @id @map("_id")
  email           String   @unique
  emailVerified   Boolean  @default(false)
  role            UserRole @default(USER)
  name            String
  avatarUrl       String?
  hashedPassword  String?
  banned          Boolean  @default(false)
  bannedReason    String?
  onboarded       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastActive      DateTime @updatedAt

   // Relations
  credentials     Credential[]
  oauthAccounts   OauthAccount[]
}

model Credential {
  id              String @id @map("_id")
  userId     String
  name       String?
  externalID String   @unique
  publicKey  Bytes    @unique
  signCount  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OauthAccount {
  id              String @id @map("_id")
  providerId    String
  providerUserId String
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Unique constraint
  @@unique([providerId, providerUserId])
}

model Product {
  id              String @id @default(auto()) @map("_id") @db.ObjectId

  title String 
  description String? 
  imageUrl String? 
  price Float?
  
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Purchase {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId String

  productId String @db.ObjectId   
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, productId])
  @@index([productId])
}

model StripeCustomer   {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}